#version=RHEL8

# Do not use graphical install
text

# Keyboard layouts
keyboard --xlayouts='us'
# System language
lang en_US.UTF-8

# Partition clearing information
clearpart --all --drives={{ hostvars[item]['disk'] }}
# Partitioning
ignoredisk --only-use={{ hostvars[item]['disk'] }}

reqpart
partition /boot --fstype=ext4 --size=512 --fsoptions=noatime
partition / --fstype=ext4 --encrypted --size=65535 --fsoptions=noatime --passphrase=temppass
partition /var/lib --fstype=ext4 --encrypted --size=262144 --maxsize=524488 --grow --passphrase=temppass

# Configure primary network interface
network --hostname={{ hostvars[item]['inventory_hostname'] }} --device=servers --teamslaves={{ hostvars[item]['network']['bond_members'] | join(',') }} --teamconfig='{"runner":{"name": "lacp", "active": true, "fast_rate": true}}' \
        --bootproto=static --ip={{ hostvars[item]['ansible_host'] }} --gateway={{ hostvars[item]['network']['gateway'] }} --nameserver={{ hostvars[item]['network']['gateway'] }} --netmask={{ hostvars[item]['network']['netmask'] }} \
        --ipv6=auto \
        --activate

# Use network installation
repo --name="Minimal" --baseurl=http://{{ ansible_default_ipv4.address }}/os/Minimal
repo --name="AppStream" --baseurl="https://dl.rockylinux.org/pub/rocky/8.6/AppStream/x86_64/kickstart" --cost=10
url --url="http://{{ ansible_default_ipv4.address }}/os"

# Disable Setup Agent on first boot
firstboot --disable
# Do not configure the X Window System
skipx
# Enable NTP
services --enabled="chronyd"
# System timezone
timezone {{ timezone }} --isUtc

# Create user (locked by default)
user --groups=wheel --name=admin
# Add SSH key
sshkey --username=root "{{ ssh_public_key }}"
# Disable root password login
rootpw --lock

# Disable SELinux
selinux --disabled

# Disable firewall
firewall --disabled

%packages
@^minimal-environment
clevis-dracut
clevis-luks
clevis-systemd
%end

%post
set -ex

# TODO: Investigate PCR stability and the practicality of using PCRs

# unlock the root disk with TPM
clevis luks bind -y -k - -d "{{ hostvars[item]['disk'] }}-part3" \
    tpm2 '{}' <<<"temppass"
cryptsetup luksRemoveKey "{{ hostvars[item]['disk'] }}-part3" <<<"temppass"

# unlock /var/lib with a keyfile
# create the directory to hold the keyfile
mkdir -p /etc/luks.keys
chmod 0700 /etc/luks.keys

# generate the keyfile
dd bs=512 count=4 if=/dev/random of=/etc/luks.keys/var-lib iflag=fullblock
chmod 0400 /etc/luks.keys/var-lib

# add the keyfile
cryptsetup luksChangeKey "{{ hostvars[item]['disk'] }}-part4" /etc/luks.keys/var-lib <<<"temppass"

# change the keyfile in /etc/crypttab
var_lib_uuid="$(blkid -o value -s UUID "{{ hostvars[item]['disk'] }}-part4")"
sed --in-place=.ks-backup --regexp-extend "s#^(.*\s+UUID=${var_lib_uuid}\s+)([^\s]+)(\s+.*)\$#\1/etc/luks.keys/var-lib\3#" /etc/crypttab

# create a partition for Ceph that occupies all of the remaining space
# this is presumed to be an NVMe drive, so I'm hoping it'll be able to handle this much concurrent use
ceph_start_sector="$(parted -m "{{ hostvars[item]['disk'] }}" unit s print free | tail -n1 | grep -E ':free;$' | cut -d':' -f2)"
parted --align optimal "{{ hostvars[item]['disk'] }}" mkpart ceph "${ceph_start_sector}" 100%

# after all of that, regenerate initramfs
dracut -fv --regenerate-all
%end

%post
echo "bpffs    /sys/fs/bpf    bpf    defaults    0 0" >>/etc/fstab
%end

reboot
