kube-prometheus-stack:
  alertmanager:
    alertmanagerSpec:
      replicas: 3

      externalUrl: "https://alertmanager.johnson.computer"

      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: zfs-default
            resources:
              requests:
                storage: 1Gi

    config:
      global:
        # Alerts without an end timeout after 5 minutes
        resolve_timeout: 5m

        # SMTP configuration
        smtp_smarthost: "smtp.smtp:25"
        smtp_hello: "alertmanager.cluster-home.johnson.computer"
        smtp_from: "Alert Manager <alertmanager@johnson.computer>"
        smtp_require_tls: false

      inhibit_rules:
        # if an alert downgrades in severity, inhibit a new notification
        - source_match:
            severity: critical
          target_match_re:
            severity: "warning|info"
          equal:
            - namespace
            - alertname
        - source_match:
            severity: warning
          target_match:
            severity: info
          equal:
            - namespace
            - alertname
        - source_match:
            alertname: InfoInhibitor
          target_match:
            severity: info
          equal:
            - namespace

      route:
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        receiver: "null"
        routes:
          - receiver: "null"
            match:
              alertname: InfoInhibitor
          - receiver: "null"
            match:
              alertname: Watchdog
          - receiver: "mj-sms"
            match:
              severity: critical
            continue: true
          - receiver: "mj-email"
            continue: true

      receivers:
        - name: "mj-email"
          email_configs:
            - send_resolved: true
              to: "Mike Johnson <michael@johnson.gg>"
        - name: "mj-sms"
          email_configs:
            - send_resolved: true
              to: "6788358132@tmomail.net"
              headers:
                Subject: '{{ template "pushover.default.title" . }}'
              text: '{{ template "pushover.default.message" . }}'
              html: ""
        - name: "null"

    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: Alertmanager
        hajimari.io/icon: alert

        # only allow internal clients
        nginx.ingress.kubernetes.io/whitelist-source-range: 10.0.0.0/8
      hosts:
        - &alertmanager_host alertmanager.johnson.computer
      tls:
        - secretName: alertmanager-general-tls
          hosts:
            - *alertmanager_host

  grafana:
    adminPassword: null
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: Grafana
        hajimari.io/icon: chart-bar

        # only allow internal clients
        nginx.ingress.kubernetes.io/whitelist-source-range: 10.0.0.0/8
      hosts:
        - &host grafana.johnson.computer
      tls:
        - secretName: grafana-general-tls
          hosts:
            - *host
    additionalDataSources:
      - name: Loki
        type: loki
        url: http://loki.loki:3100
      - name: Alertmanager
        type: alertmanager
        url: http://alertmanager-operated:9093
        jsonData:
          implementation: prometheus
    envFromSecret: grafana-secrets
    grafana.ini:
      server:
        root_url: https://grafana.johnson.computer
      auth.generic_oauth:
        enabled: true
        allow_sign_up: true
        name: Dex
        client_id: grafana-sso
        client_secret: $__env{GRAFANA_SSO_CLIENT_SECRET}
        scopes: openid profile email groups
        auth_url: https://dex.johnson.computer/auth
        token_url: https://dex.johnson.computer/token
        api_url: https://dex.johnson.computer/userinfo
      analytics:
        reporting_enabled: false
        check_for_updates: false
    persistence:
      enabled: true
    # this deployment strategy is necessary because of persistence
    deploymentStrategy:
      type: Recreate

  additionalPrometheusRulesMap:
    custom-node-exporter:
      groups:
        - name: custom-node-exporter
          rules:
            - record: instance:node_memory_utilisation_custom:ratio
              expr: |-
                1 - (
                  (
                    node_memory_MemAvailable_bytes{job="node-exporter"}
                  +
                    node_zfs_arc_size{job="node-exporter"}
                  )
                /
                  node_memory_MemTotal_bytes{job="node-exporter"}
                )
            - record: instance:node_network_receive_bytes_physical:rate5m
              expr: |-
                sum without (device) (
                  rate(node_network_receive_bytes_total{job="node-exporter", device=~"(en(o|s)\\d+|enp\\d+s\\d+|eth\\d+|enx[0-9a-fA-F]+)"}[5m])
                )
            - record: instance:node_network_transmit_bytes_physical:rate5m
              expr: |-
                sum without (device) (
                  rate(node_network_transmit_bytes_total{job="node-exporter", device=~"(en(o|s)\\d+|enp\\d+s\\d+|eth\\d+|enx[0-9a-fA-F]+)"}[5m])
                )
            - record: instance:node_network_receive_drop_physical:rate5m
              expr: |-
                sum without (device) (
                  rate(node_network_receive_drop_total{job="node-exporter", device=~"(en(o|s)\\d+|enp\\d+s\\d+|eth\\d+|enx[0-9a-fA-F]+)"}[5m])
                )
            - record: instance:node_network_transmit_drop_physical:rate5m
              expr: |-
                sum without (device) (
                  rate(node_network_transmit_drop_total{job="node-exporter", device=~"(en(o|s)\\d+|enp\\d+s\\d+|eth\\d+|enx[0-9a-fA-F]+)"}[5m])
                )

  prometheus:
    prometheusSpec:
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false

      replicas: 3

      retention: 365d

      externalUrl: "https://prometheus.johnson.computer"

      additionalScrapeConfigs:
        - job_name: gateway
          scrape_interval: 1m
          scrape_timeout: 30s
          scheme: https
          static_configs:
            - targets:
                - gateway.home.johnson.computer

      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 64Gi

    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: Prometheus
        hajimari.io/icon: database

        # only allow internal clients
        nginx.ingress.kubernetes.io/whitelist-source-range: 10.0.0.0/8
      hosts:
        - &prometheus_host prometheus.johnson.computer
      tls:
        - secretName: prometheus-general-tls
          hosts:
            - *prometheus_host

  kubeControllerManager:
    endpoints:
      - 10.0.2.10
    service:
      port: 10257
      targetPort: 10257
    serviceMonitor:
      https: true
      insecureSkipVerify: true

  kubeScheduler:
    endpoints:
      - 10.0.2.10
    service:
      port: 10259
      targetPort: 10259
    serviceMonitor:
      https: true
      insecureSkipVerify: true

  kubeProxy:
    endpoints:
      - 10.0.2.10
